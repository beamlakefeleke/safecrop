// ignore_for_file: prefer_const_constructors

import 'package:flutter/material.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:math' show asin, cos, sqrt;
import 'package:safe_crop/view/pages/lang/AppLocalizations.dart';
import 'package:uuid/uuid.dart';

// Create a global instance of Uuid
Uuid uuid = Uuid();

// Update the method to use unique IDs generated by Uuid

class NewsPage extends StatefulWidget {
  final double latitude;
  final double longitude;

  const NewsPage({Key? key, required this.latitude, required this.longitude})
      : super(key: key);

  @override
  _NewsPageState createState() => _NewsPageState();
}

class _NewsPageState extends State<NewsPage> with SingleTickerProviderStateMixin {
  late TabController _tabController;
  List<DocumentSnapshot> emergencyNews = [];
  List<DocumentSnapshot> pesticideNews = [];
  List<DocumentSnapshot> generalNews = [];

  @override
  void initState() {
    super.initState();
    // Initialize the TabController
    _tabController = TabController(length: 3, vsync: this);
    // Fetch news based on passed latitude and longitude parameters
    fetchNews().listen((List<List<DocumentSnapshot>> newsLists) {
      setState(() {
        emergencyNews = newsLists[0];
        pesticideNews = newsLists[1];
        generalNews = newsLists[2];
      });
    });
  }

  @override
  void dispose() {
    // Dispose the TabController
    _tabController.dispose();
    super.dispose();
  }

  // Function to calculate the distance between two geo points in kilometers
  double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
    const p = 0.017453292519943295;
    var a = 0.5 -
        cos((lat2 - lat1) * p) / 2 +
        cos(lat1 * p) * cos(lat2 * p) * (1 - cos((lon2 - lon1) * p)) / 2;
    return 12742 * asin(sqrt(a)); // 2 * R; R = 6371 km
  }

  // Function to fetch all news within a 100 km radius of a given location
  Stream<List<List<DocumentSnapshot>>> fetchNews() {
    try {
      // Query all news
      Stream<QuerySnapshot> newsStream =
          FirebaseFirestore.instance.collection('News').snapshots();

      // Return the stream directly without filtering
      return newsStream.map((querySnapshot) {
        List<DocumentSnapshot> allNews = querySnapshot.docs.toList();
        return [
          allNews,
          allNews,
          allNews
        ]; // For simplicity, return all news for each category
      });
    } catch (e) {
      print('Error fetching news: $e');
      // Handle the error accordingly
      return Stream.empty();
    }
  }

  @override
  Widget build(BuildContext context) {
    var localizedStrings = AppLocalizations.of(context);
    String? tab1 = localizedStrings?.getnews_tab1();
    String? tab2 = localizedStrings?.getnews_tab2();
    String? tab3 = localizedStrings?.getnews_tab3();
    String? newsHead = localizedStrings?.getnews_head();
    String? btnName = localizedStrings?.getbtn_name();
    String? safeCrop = localizedStrings?.getSafeCrop();

    return Scaffold(
      backgroundColor: Color.fromARGB(255, 128, 200, 85),
      appBar: AppBar(
        backgroundColor: Color.fromARGB(255, 128, 200, 85),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {
            // Navigate back to the previous screen
            Navigator.pop(context);
          },
        ),
        title: Text('${newsHead ?? 'News'}'),
      ),
      resizeToAvoidBottomInset: false,
      body: Column(
        children: [
          Container(
              child: Column(
            children: [
              Container(
                  child: Container(
                height: MediaQuery.of(context).size.height / 6,
                width: MediaQuery.of(context).size.width,
                child: Column(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Image(
                        width: 70,
                        image: AssetImage(
                          "assets/a.png",
                        ),
                      ),
                      Text(
                        '${safeCrop ?? 'Safe Crop'}',
                        style: TextStyle(
                          fontSize: 28,
                          color: Colors.white,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ]),
              )),
              Container(
                decoration: BoxDecoration(
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black26,
                      offset: Offset(-3, 5),
                      blurRadius: 22,
                      spreadRadius: 6,
                    ),
                  ],
                  color: Color.fromARGB(255, 6, 47, 21),
                ),
                height: MediaQuery.of(context).size.height / 9,
                width: MediaQuery.of(context).size.width,
                // padding: EdgeInsets.only(bottom:50),
                child: Center(
                  // Center widget added here
                  child: TabBar(
                    labelColor: Color.fromARGB(255, 128, 200, 85),
                    unselectedLabelColor: Colors.white,
                    controller: _tabController,
                    tabs: [
                      Tab(
                        text: '${tab1}',
                        icon: Icon(
                          Icons.error_outline,
                          size: MediaQuery.of(context).size.height / 33,
                          color: Colors.white,
                        ), // Emergency News Icon
                      ),
                      Tab(
                        text: '${tab2}',
                        icon: Icon(
                          Icons.science,
                          size: MediaQuery.of(context).size.height / 33,
                          color: Colors.white,
                        ), // Pesticide News Icon
                      ),
                      Tab(
                        text: ' ${tab3} ',
                        icon: Icon(
                          Icons.article,
                          size: MediaQuery.of(context).size.height / 33,
                          color: Colors.white,
                        ), // General News Icon
                      ),
                    ],
                  ),
                ),
              ),
            ],
          )),
          Expanded(
            child: TabBarView(
              controller: _tabController,
              children: [
                NewsTab(news: emergencyNews),
                NewsTab(news: pesticideNews),
                NewsTab(news: generalNews),
              ],
            ),
          ),
        ],
      ),
    );
  }
}

class DetailPage extends StatefulWidget {
  final String newsId;
  final String title;
  final String disc;
  final String image;
  // final GeoPoint location;
  final String cropType;
  final String date;
  final String techId;

  const DetailPage({
    Key? key,
    required this.newsId,
    required this.title,
    required this.disc,
    required this.image,
    // required this.location,
    required this.cropType,
    required this.date,
    required this.techId,
  }) : super(key: key);

  @override
  _DetailPageState createState() => _DetailPageState();
}

class _DetailPageState extends State<DetailPage> {
  bool isExpanded = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(widget.title),
      ),
      body: SingleChildScrollView(
        child: Center(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Container(
                width: double.infinity,
                height: 200,
                decoration: BoxDecoration(
                  image: DecorationImage(
                    fit: BoxFit.cover,
                    image: NetworkImage(widget.image),
                  ),
                ),
              ),
              Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    SizedBox(height: 8),
                    buildDescriptionText(),
                    SizedBox(height: 8),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget buildDescriptionText() {
    final text = widget.disc;
    final maxLength = 100;

    if (text.length <= maxLength) {
      return Text(
        'Description: $text',
        style: TextStyle(fontSize: 16),
      );
    } else {
      return Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Description: ${isExpanded ? text : text.substring(0, maxLength) + '...'}',
            style: TextStyle(fontSize: 16),
          ),
          GestureDetector(
            onTap: () {
              setState(() {
                isExpanded = !isExpanded;
              });
            },
            child: Text(
              isExpanded ? 'See less' : 'See more',
              style: TextStyle(color: Colors.blue),
            ),
          ),
        ],
      );
    }
  }
}

class NewsTab extends StatelessWidget {
  final List<DocumentSnapshot> news;

  NewsTab({required this.news});

  @override
  Widget build(BuildContext context) {
    return ListView.builder(
      itemCount: news.length,
      itemBuilder: (context, index) {
        var newsData = <String, dynamic>{};

        try {
          newsData = news[index].data() as Map<String, dynamic>;
        } catch (e) {
          print('Error casting news data: $e');
          // Handle the error accordingly, e.g., skip the invalid document or show a default message
          return Container(
            padding: EdgeInsets.all(16),
            child: Text(
              'Error loading news data.',
              style: TextStyle(color: Colors.red),
            ),
          );
        }

        return Container(
          margin: EdgeInsets.only(top: 10, left: 10, right: 10),
          decoration: BoxDecoration(
            boxShadow: [
              BoxShadow(
                color: Color.fromARGB(66, 200, 183, 183),
                offset: Offset(-3, 5),
                blurRadius: 22,
                spreadRadius: 6,
              ),
            ],
            color: Colors.white,
            borderRadius: BorderRadius.circular(10),
          ),
          child: ElevatedButton(
            onPressed: () {
              Navigator.of(context).push(
                MaterialPageRoute(
                  builder: (BuildContext context) {
                    return DetailPage(
                      newsId: newsData['newsId'] ?? 'N/A',
                      title: newsData['title'] ?? 'N/A',
                      disc: newsData['disc'] ?? 'N/A',
                      image: newsData['image'] ?? 'https://via.placeholder.com/150',
                      cropType: newsData['cropType'] ?? 'N/A',
                      date: newsData['date'] ?? 'N/A',
                      techId: newsData['techId'] ?? 'N/A',
                    );
                  },
                ),
              );
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.transparent,
              elevation: 0,
              shape: RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),
              ),
              padding: EdgeInsets.zero,
            ),
            child: ListTile(
              contentPadding: EdgeInsets.all(10),
              leading: CircleAvatar(
                radius: 50, // Adjust the radius as needed
                backgroundColor: Colors.transparent, // Optional: set the background color to transparent
                child: Container(
                  decoration: BoxDecoration(
                    shape: BoxShape.circle,
                    image: DecorationImage(
                      fit: BoxFit.cover,
                      image: NetworkImage(newsData['image'] ?? 'https://via.placeholder.com/150'),
                    ),
                  ),
                ),
              ),
              title: Text(
                newsData['title'] ?? 'No title',
                style: TextStyle(
                  fontWeight: FontWeight.bold,
                  color: Colors.black,
                ),
              ),
              subtitle: Text(
                newsData['disc'] ?? 'No description',
                style: TextStyle(
                  color: Colors.grey[700],
                ),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
            ),
          ),
        );
      },
    );
  }
}


// // ignore_for_file: prefer_const_constructors

// import 'package:flutter/material.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'dart:math' show asin, cos, sqrt;
// import 'package:safe_crop/view/pages/lang/AppLocalizations.dart';
// import 'package:uuid/uuid.dart';

// // Create a global instance of Uuid
// Uuid uuid = Uuid();

// // Update the method to use unique IDs generated by Uuid

// class NewsPage extends StatefulWidget {
//   final double latitude;
//   final double longitude;

//   const NewsPage({Key? key, required this.latitude, required this.longitude})
//       : super(key: key);

//   @override
//   _NewsPageState createState() => _NewsPageState();
// }

// class _NewsPageState extends State<NewsPage> with SingleTickerProviderStateMixin {
//   late TabController _tabController;
//   List<DocumentSnapshot> emergencyNews = [];
//   List<DocumentSnapshot> pesticideNews = [];
//   List<DocumentSnapshot> generalNews = [];

//   @override
//   void initState() {
//     super.initState();
//     // Initialize the TabController
//     _tabController = TabController(length: 3, vsync: this);
//     // Fetch news based on the initial tab (emergency by default)
//     fetchNews('News').listen((List<List<DocumentSnapshot>> newsLists) {
//       setState(() {
//         emergencyNews = newsLists[0];
//         pesticideNews = newsLists[1];
//         generalNews = newsLists[2];
//       });
//     });

//     // Add listener to tab controller to fetch news for each tab type
//     _tabController.addListener(() {
//       // Fetch news based on the selected tab
//       switch (_tabController.index) {
//         case 0:
//           setState(() {
//             fetchNews('emergencyNews').listen((List<List<DocumentSnapshot>> newsLists) {
//             setState(() {
//               emergencyNews = newsLists[0];
//             });
//           });
//           });
//           break;
//         case 1:
//          setState(() {
//             fetchNews('pesticideNews').listen((List<List<DocumentSnapshot>> newsLists) {
//             setState(() {
//               pesticideNews = newsLists[1];
//             });
//           });
//          });
//           break;
//         case 2:
//          setState(() {
//             fetchNews('generalNews').listen((List<List<DocumentSnapshot>> newsLists) {
//             setState(() {
//               generalNews = newsLists[2];
//             });
//           });
//          });
//           break;
//       }
//     });
//   }

//   @override
//   void dispose() {
//     // Dispose the TabController
//     _tabController.dispose();
//     super.dispose();
//   }

//   // Function to calculate the distance between two geo points in kilometers
//   double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
//     const p = 0.017453292519943295;
//     var a = 0.5 -
//         cos((lat2 - lat1) * p) / 2 +
//         cos(lat1 * p) * cos(lat2 * p) * (1 - cos((lon2 - lon1) * p)) / 2;
//     return 12742 * asin(sqrt(a)); // 2 * R; R = 6371 km
//   }

  
//   Stream<List<List<DocumentSnapshot>>> fetchNews(String newsType) {
//     try {
//       // Query news based on the newsType parameter
//       Stream<QuerySnapshot> newsStream =
//           FirebaseFirestore.instance.collection('News').where('newsType', isEqualTo: newsType).snapshots();

//       // Return the stream directly without filtering
//       return newsStream.map((querySnapshot) {
//         List<DocumentSnapshot> allNews = querySnapshot.docs.toList();
//         return [
//           newsType == 'emergencyNews' ? allNews : [],
//           newsType == 'generalNews' ? allNews : [],
//           newsType == 'pesticideNews' ? allNews : [],
//         ]; // Return only the relevant news for the specified news type
//       });
//     } catch (e) {
//       print('Error fetching news: $e');
//       // Handle the error accordingly
//       return Stream.empty();
//     }
//   }

//   @override
//   Widget build(BuildContext context) {
//     var localizedStrings = AppLocalizations.of(context);
//     String? tab1 = localizedStrings?.getnews_tab1();
//     String? tab2 = localizedStrings?.getnews_tab2();
//     String? tab3 = localizedStrings?.getnews_tab3();
//     String? newsHead = localizedStrings?.getnews_head();
//     String? btnName = localizedStrings?.getbtn_name();
//     String? safeCrop = localizedStrings?.getSafeCrop();

//     return Scaffold(
//       backgroundColor: Color.fromARGB(255, 128, 200, 85),
//       appBar: AppBar(
//         backgroundColor: Color.fromARGB(255, 128, 200, 85),
//         leading: IconButton(
//           icon: const Icon(Icons.arrow_back),
//           onPressed: () {
//             // Navigate back to the previous screen
//             Navigator.pop(context);
//           },
//         ),
//         title: Text('${newsHead ?? 'News'}'),
//       ),
//       resizeToAvoidBottomInset: false,
//       body: Column(
//         children: [
//           Container(
//               child: Column(
//             children: [
//               Container(
//                   child: Container(
//                 height: MediaQuery.of(context).size.height / 6,
//                 width: MediaQuery.of(context).size.width,
//                 child: Column(
//                     mainAxisAlignment: MainAxisAlignment.center,
//                     children: [
//                       Image(
//                         width: 70,
//                         image: AssetImage(
//                           "assets/a.png",
//                         ),
//                       ),
//                       Text(
//                         '${safeCrop ?? 'Safe Crop'}',
//                         style: TextStyle(
//                           fontSize: 28,
//                           color: Colors.white,
//                           fontWeight: FontWeight.bold,
//                         ),
//                       ),
//                     ]),
//               )),
//               Container(
//                 decoration: BoxDecoration(
//                   boxShadow: [
//                     BoxShadow(
//                       color: Colors.black26,
//                       offset: Offset(-3, 5),
//                       blurRadius: 22,
//                       spreadRadius: 6,
//                     ),
//                   ],
//                   color: Color.fromARGB(255, 6, 47, 21),
//                 ),
//                 height: MediaQuery.of(context).size.height / 9,
//                 width: MediaQuery.of(context).size.width,
//                 // padding: EdgeInsets.only(bottom:50),
//                 child: Center(
//                   // Center widget added here
//                   child: TabBar(
//                     labelColor: Color.fromARGB(255, 128, 200, 85),
//                     unselectedLabelColor: Colors.white,
//                     controller: _tabController,
//                     tabs: [
//                       Tab(
//                         text: '${tab1}',
//                         icon: Icon(
//                           Icons.error_outline,
//                           size: MediaQuery.of(context).size.height / 33,
//                           color: Colors.white,
//                         ), // Emergency News Icon
//                       ),
//                       Tab(
//                         text: '${tab2}',
//                         icon: Icon(
//                           Icons.science,
//                           size: MediaQuery.of(context).size.height / 33,
//                           color: Colors.white,
//                         ), // Pesticide News Icon
//                       ),
//                       Tab(
//                         text: ' ${tab3} ',
//                         icon: Icon(
//                           Icons.article,
//                           size: MediaQuery.of(context).size.height / 33,
//                           color: Colors.white,
//                         ), // General News Icon
//                       ),
//                     ],
//                   ),
//                 ),
//               ),
//             ],
//           )),
//           Expanded(
//             child: TabBarView(
//               controller: _tabController,
//               children: [
//                NewsTab(news: emergencyNews),
//                 NewsTab(news: pesticideNews),
//                 NewsTab(news: generalNews),
//               ],
//             ),
//           ),
//         ],
//       ),
//     );
//   }
// }

// class DetailPage extends StatefulWidget {
//   final String newsId;
//   final String title;
//   final String disc;
//   final String image;
//   // final GeoPoint location;
//   final String cropType;
//   final String date;
//   final String techId;

//   const DetailPage({
//     Key? key,
//     required this.newsId,
//     required this.title,
//     required this.disc,
//     required this.image,
//     // required this.location,
//     required this.cropType,
//     required this.date,
//     required this.techId,
//   }) : super(key: key);

//   @override
//   _DetailPageState createState() => _DetailPageState();
// }

// class _DetailPageState extends State<DetailPage> {
//   bool isExpanded = false;

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: Text(widget.title),
//       ),
//       body: SingleChildScrollView(
//         child: Center(
//           child: Column(
//             crossAxisAlignment: CrossAxisAlignment.start,
//             children: [
//               Container(
//                 width: double.infinity,
//                 height: 200,
//                 decoration: BoxDecoration(
//                   image: DecorationImage(
//                     fit: BoxFit.cover,
//                     image: NetworkImage(widget.image),
//                   ),
//                 ),
//               ),
//               Padding(
//                 padding: const EdgeInsets.all(16.0),
//                 child: Column(
//                   crossAxisAlignment: CrossAxisAlignment.start,
//                   children: [
//                     SizedBox(height: 8),
//                     buildDescriptionText(),
//                     SizedBox(height: 8),
//                   ],
//                 ),
//               ),
//             ],
//           ),
//         ),
//       ),
//     );
//   }

//   Widget buildDescriptionText() {
//     final text = widget.disc;
//     final maxLength = 100;

//     if (text.length <= maxLength) {
//       return Text(
//         'Description: $text',
//         style: TextStyle(fontSize: 16),
//       );
//     } else {
//       return Column(
//         crossAxisAlignment: CrossAxisAlignment.start,
//         children: [
//           Text(
//             'Description: ${isExpanded ? text : text.substring(0, maxLength) + '...'}',
//             style: TextStyle(fontSize: 16),
//           ),
//           GestureDetector(
//             onTap: () {
//               setState(() {
//                 isExpanded = !isExpanded;
//               });
//             },
//             child: Text(
//               isExpanded ? 'See less' : 'See more',
//               style: TextStyle(color: Colors.blue),
//             ),
//           ),
//         ],
//       );
//     }
//   }
// }

// class NewsTab extends StatelessWidget {
//   final List<DocumentSnapshot> news;

//   NewsTab({required this.news});

//   @override
//   Widget build(BuildContext context) {
//     return ListView.builder(
//       itemCount: news.length,
//       itemBuilder: (context, index) {
//         var newsData = <String, dynamic>{};

//         try {
//           newsData = news[index].data() as Map<String, dynamic>;
//         } catch (e) {
//           print('Error casting news data: $e');
//           // Handle the error accordingly, e.g., skip the invalid document or show a default message
//           return Container(
//             padding: EdgeInsets.all(16),
//             child: Text(
//               'Error loading news data.',
//               style: TextStyle(color: Colors.red),
//             ),
//           );
//         }

//         return Container(
//           margin: EdgeInsets.only(top: 10, left: 10, right: 10),
//           decoration: BoxDecoration(
//             boxShadow: [
//               BoxShadow(
//                 color: Color.fromARGB(66, 200, 183, 183),
//                 offset: Offset(-3, 5),
//                 blurRadius: 22,
//                 spreadRadius: 6,
//               ),
//             ],
//             color: Colors.white,
//             borderRadius: BorderRadius.circular(10),
//           ),
//           child: ElevatedButton(
//             onPressed: () {
//               Navigator.of(context).push(
//                 MaterialPageRoute(
//                   builder: (BuildContext context) {
//                     return DetailPage(
//                       newsId: newsData['newsId'] ?? 'N/A',
//                       title: newsData['title'] ?? 'N/A',
//                       disc: newsData['disc'] ?? 'N/A',
//                       image: newsData['image'] ?? 'https://via.placeholder.com/150',
//                       cropType: newsData['cropType'] ?? 'N/A',
//                       date: newsData['date'] ?? 'N/A',
//                       techId: newsData['techId'] ?? 'N/A',
//                     );
//                   },
//                 ),
//               );
//             },
//             style: ElevatedButton.styleFrom(
//               primary: Colors.transparent,
//               elevation: 0,
//               shape: RoundedRectangleBorder(
//                 borderRadius: BorderRadius.circular(10),
//               ),
//               padding: EdgeInsets.zero,
//             ),
//             child: ListTile(
//               contentPadding: EdgeInsets.all(10),
//               leading: CircleAvatar(
//                 radius: 50, // Adjust the radius as needed
//                 backgroundColor: Colors.transparent, // Optional: set the background color to transparent
//                 child: Container(
//                   decoration: BoxDecoration(
//                     shape: BoxShape.circle,
//                     image: DecorationImage(
//                       fit: BoxFit.cover,
//                       image: NetworkImage(newsData['image'] ?? 'https://via.placeholder.com/150'),
//                     ),
//                   ),
//                 ),
//               ),
//               title: Text(
//                 newsData['title'] ?? 'No title',
//                 style: TextStyle(
//                   fontWeight: FontWeight.bold,
//                   color: Colors.black,
//                 ),
//               ),
//               subtitle: Text(
//                 newsData['disc'] ?? 'No description',
//                 style: TextStyle(
//                   color: Colors.grey[700],
//                 ),
//                 maxLines: 2,
//                 overflow: TextOverflow.ellipsis,
//               ),
//             ),
//           ),
//         );
//       },
//     );
//   }
// }
